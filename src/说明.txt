【开发步骤】：
1. 定义远程接口
用IDL定义远程对象的接口,使用IDL而不是Java语言是因为idltojava编译器可以自动地从IDL产生Java语言的桩和骨架源文件,以及和ORB连接时所需要的一些代码。
使用IDL,开发人员可以用其他语言来实现客户机和服务器。如果要为一个已经存在的CORBA服务实现客户机,或为一个已经存在的客户机实现服务,则首先要给出IDL接口,
然后运行idltojava编译器产生桩和骨架,在此基础上再进行实现。

2. 编译远程接口
在IDL文件运行idltojava编译器,产生Java版本的接口,以及桩和骨架代码文件,这些代码文件使得应用程序可以和ORB相连接。

3. 实现服务器
把idltojava编译器产生的骨架和服务器应用程序集成在一起,除了要实现远程接口中的方法之外,服务器代码还要包括启动ORB以及等待远程客户机的调用等部分。

4. 实现客户机
类似地,以桩作为客户端应用程序的基础,客户机建立在桩之上,通过Java IDL提供的名字服务查询服务器,获得远程对象的引用,然后调用远程对象中的方法。

5. 启动应用程序
一旦实现了服务器和客户机,就可以启动名字服务,接着启动服务器,然后运行客户机


【测试步骤】：
1.运行startorbd.bat批处理文件,启动orbd服务,注意根据实际安装JDK的路径修改批处理文件
   (可以用netstat -ant命令查看指定的端口是否启动)

2.运行服务端程序 HelloServer.java
   网上很多资料都是运行java和javac命令来启动服务端的，但是对引入多个包的代码我真不会用javac命令，
   按照网上的命令：
   java HelloServer -ORBInitialPort 1050
   我按照这个是运行不起来的，可能我不知道怎么用吧，这里我就把需要传入的参数在代码中写死了
   
3.运行客户端程序 HelloClient.java
   网上很多资料都是运行java和javac命令来启动客户端的，但是对引入多个包的代码我真不会用javac命令，
   按照网上的命令：
   java  HelloClient  -ORBInitialHost  127.0.0.1  -ORBInitialPort  1050
   我按照这个是运行不起来的，可能我不知道怎么用吧，这里我就把需要传入的参数在代码中写死了